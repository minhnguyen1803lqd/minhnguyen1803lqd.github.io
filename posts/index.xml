<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Tuinie</title>
        <link>https://minhnguyen1803lqd.github.io/posts/</link>
        <description>Recent content in Posts on Tuinie</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 22 Sep 2020 08:13:50 +0700</lastBuildDate>
        <atom:link href="https://minhnguyen1803lqd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>QBSCHOOL | Đến trường</title>
            <link>https://minhnguyen1803lqd.github.io/posts/2020/09/qbschool-%C4%91%E1%BA%BFn-tr%C6%B0%E1%BB%9Dng/</link>
            <pubDate>Tue, 22 Sep 2020 08:13:50 +0700</pubDate>
            
            <guid>https://minhnguyen1803lqd.github.io/posts/2020/09/qbschool-%C4%91%E1%BA%BFn-tr%C6%B0%E1%BB%9Dng/</guid>
            <description>Đề bài  Time limit per test: 1 second Memory limit per test: 1024 megabytes Input: standard input Output: standard output   Ngày 27/11 tới là ngày tổ chức thi học kỳ I ở trường ĐH BK. Là sinh viên năm thứ nhất, Hiếu không muốn vì đi muộn mà gặp trục trặc ở phòng thi nên đã chuẩn bị khá kỹ càng. Chỉ còn lại một công việc khá gay go là Hiếu không biết đi đường nào tới trường là nhanh nhất.</description>
            <content type="html"><![CDATA[<h2 id="đề-bài"><em>Đề bài</em></h2>
<ul>
<li>Time limit per test: 1 second</li>
<li>Memory limit per test: 1024 megabytes</li>
<li>Input: standard input</li>
<li>Output: standard output</li>
</ul>
<hr>
<p>Ngày 27/11 tới là ngày tổ chức thi học kỳ I ở trường ĐH BK. Là sinh viên năm thứ nhất, Hiếu không muốn vì đi muộn mà gặp trục trặc ở phòng thi nên đã chuẩn bị khá kỹ càng. Chỉ còn lại một công việc khá gay go là Hiếu không biết đi đường nào tới trường là nhanh nhất.</p>
<p>Thường ngày Hiếu không quan tâm tới vấn đề này lắm cho nên bây giờ Hiếu không biết phải làm sao cả. Bản đồ thành phố là gồm có <strong>N</strong> nút giao thông và <strong>M</strong> con đường nối các nút giao thông này. Có 2 loại con đường là đường 1 chiều và đường 2 chiều. Độ dài của mỗi con đường là một số nguyên dương.</p>
<p>Nhà Hiếu ở nút giao thông 1 còn trường ĐH BK ở nút giao thông <strong>N</strong>. Vì một lộ trình đường đi từ nhà Hiếu tới trường có thể gặp nhiều yếu tố khác như là gặp nhiều đèn đỏ, đi qua công trường xây dựng, &hellip; phải giảm tốc độ cho nên Hiếu muốn biết là có tất cả bao nhiêu lộ trình ngắn nhất đi từ nhà tới trường. Bạn hãy lập trình giúp Hiếu giải quyết bài toán khó này.</p>
<p><strong>Input</strong></p>
<ul>
<li>Dòng thứ nhất ghi hai số nguyên <strong>N</strong> và <strong>M</strong>.</li>
<li><strong>M</strong> dòng tiếp theo, mỗi dòng ghi 4 số nguyên dương <strong>K</strong>, <strong>U</strong>, <strong>V</strong>, <strong>L</strong>. Trong đó:</li>
<li><strong>K</strong> = 1 có nghĩa là có đường đi một chiều từ <strong>U</strong> đến <strong>V</strong> với độ dài <strong>L</strong>.</li>
<li><strong>K</strong> = 2 có nghìa là có đường đi hai chiều giữa <strong>U</strong> và <strong>V</strong> với độ dài <strong>L</strong>.</li>
</ul>
<p><strong>Output</strong></p>
<p>Ghi hai số là độ dài đường đi ngắn nhấn và số lượng đường đi ngắn nhất. Biết rằng số lượng đường đi ngắn nhất không vượt quá phạm vì int64 trong pascal hay long long trong C++.</p>
<p><strong>Example</strong></p>
<pre><code>Input
3 2
1 1 2 3
2 2 3 1
Output
4 1
</code></pre><p><strong>Note</strong></p>
<p>Giới hạn: <strong>1</strong> ≤ <strong>N</strong> ≤ <strong>5000</strong> <strong>1</strong> ≤ <strong>M</strong> ≤ <strong>20000</strong> Độ dài các con đường ≤<strong>32000</strong></p>
<h2 id="ý-tưởng"><em>Ý tưởng</em></h2>
<p>Thuật toán Dijkstra kết hợp Quy hoạch động</p>
<h2 id="code"><em>Code</em></h2>
<pre><code>#include &lt;bits/stdc++.h&gt;

//#define int long long
#define ll long long
#define ii pair &lt; int, int &gt;
#define fi first
#define se second
#define mp make_pair
#define FOR(i, l, r) for (auto i = l; i &lt;= r; ++i)
#define REV(i, r, l) for (auto i = r; i &gt;= l; --i)
#define REP(i, n) for (auto i = 0; i &lt; n; ++i)
#define debug(x) cout &lt;&lt; &quot;[Debuging]...&quot; &lt;&lt; (#x) &lt;&lt; &quot; is &quot; &lt;&lt; (x) &lt;&lt; endl;
#define endl &quot;\n&quot;

using namespace std;

const string file_name = &quot;Task&quot;;
const int inf = 1e9 + 7;
const int N = 5e4 + 7;

int n, m;
long long f[N];
vector &lt; ii &gt; g[N];

int Dijkstra(int sourceNode, int endNode) {
	int dis[N];
	for (int i = 1; i &lt;= n; ++i) dis[i] = inf, f[i] = 0;
	dis[sourceNode] = 0;
	f[sourceNode] = 1;
	priority_queue &lt; ii, vector &lt; ii &gt;, greater &lt; ii &gt; &gt; pq;
	pq.push(ii(sourceNode, 0));

	while (!pq.empty()) {
		int u = pq.top().fi, disU = pq.top().se;
		pq.pop();
		for (int i = 0; i &lt; g[u].size(); ++i) {
			int v = g[u][i].fi, w = g[u][i].se;
			if (dis[v] &gt; disU + w) {
				dis[v] = disU + w;
				f[v] = f[u];
				pq.push(ii(v, dis[v]));
			} else if (dis[v] == disU + w) {
				f[v] += f[u];
			}
		}
	}
	return (dis[endNode]);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen ((file_name + &quot;.inp&quot;).c_str(), &quot;r&quot;, stdin);
	freopen ((file_name + &quot;.out&quot;).c_str(), &quot;w&quot;, stdout);
	cin &gt;&gt; n &gt;&gt; m;
	for (int i = 1; i &lt;= m; ++i) {
		int type, u, v, w;
		cin &gt;&gt; type &gt;&gt; u &gt;&gt; v &gt;&gt; w;
		g[u].push_back(ii(v, w));
		if (type == 2) g[v].push_back(ii(u, w));
	}
	int res = Dijkstra(1, n);
	cout &lt;&lt; res &lt;&lt; &quot; &quot; &lt;&lt; f[n] &lt;&lt; endl;
}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>FWATER | Tưới nước đồng cỏ</title>
            <link>https://minhnguyen1803lqd.github.io/posts/2020/09/fwater-t%C6%B0%E1%BB%9Bi-n%C6%B0%E1%BB%9Bc-%C4%91%E1%BB%93ng-c%E1%BB%8F/</link>
            <pubDate>Sun, 20 Sep 2020 13:13:58 +0700</pubDate>
            
            <guid>https://minhnguyen1803lqd.github.io/posts/2020/09/fwater-t%C6%B0%E1%BB%9Bi-n%C6%B0%E1%BB%9Bc-%C4%91%E1%BB%93ng-c%E1%BB%8F/</guid>
            <description>Đề bài Nông dân John quyết định mang nước tới cho N (1≤N≤300) đồng cỏ của mình, để thuận tiện ta đánh số các đồng cỏ từ 1 đến N. Để tưới nước cho 1 đồng cỏ John có thể chọn 2 cách, 1 là đào ở đồng cỏ đó 1 cái giếng hoặc lắp ống nối dẫn nước từ những đồng cỏ trước đó đã có nước tới.
Để đào một cái giếng ở đồng cỏ i cần 1 số tiền là Wi (1≤ Wi ≤100, 000).</description>
            <content type="html"><![CDATA[<h2 id="đề-bài"><em>Đề bài</em></h2>
<p>Nông dân John quyết định mang nước tới cho N (1≤N≤300) đồng cỏ của mình, để thuận tiện ta đánh số các đồng cỏ từ 1 đến N. Để tưới nước cho 1 đồng cỏ John có thể chọn 2 cách, 1 là đào ở đồng cỏ đó 1 cái giếng hoặc lắp ống nối dẫn nước từ những đồng cỏ trước đó đã có nước tới.</p>
<p>Để đào một cái giếng ở đồng cỏ i cần 1 số tiền là Wi (1≤ Wi ≤100, 000). Lắp ống dẫn nước nối 2 đồng cỏ i và j cần 1 số tiền là Pij (1≤ Pij ≤100000; Pij=Pji;Pii=0).</p>
<p>Tính xem nông dân John phải chi ít nhất bao nhiêu tiền để tất cả các đồng cỏ đều có nước.</p>
<p><strong>Input</strong></p>
<ul>
<li>Dòng 1: Một số nguyên duy nhất: N</li>
<li>Các dòng 2.. N + 1: Dòng i+1 chứa 1 số nguyên duy nhất: Wi</li>
<li>Các dòng N+2.. 2N+1: Dòng N+1+i chứa N số nguyên cách nhau bởi dấu cách; số thứ j là Pij</li>
</ul>
<p><strong>Output</strong></p>
<p>Dòng 1: Một số nguyên duy nhất là chi phí tối thiểu để cung cấp nước cho tất cả các đồng cỏ.</p>
<p><strong>Example</strong></p>
<pre><code>input
4
5
4
4
3
0 2 2 2
2 0 3 3
2 3 0 4
2 3 4 0
output
9
</code></pre><h2 id="ý-tưởng"><em>Ý tưởng</em></h2>
<p>Tạo thêm đỉnh giả nối đến n đỉnh đã cho sẵn với trọng số là chi phí đào giếng ở n đỉnh đó. Sau đó áp dụng các thuật toán tìm kiếm cây khung nhỏ nhất để đưa ra lời giải của bài toán.</p>
<h2 id="code"><em>Code</em></h2>
<p>Đã nộp và AC trên VNOI</p>
<p>Link: <a href="https://codeforces.com/group/FLVn1Sc504/contest/274813/problem/Z">FWATER</a></p>
<pre><code>#include &lt;bits/stdc++.h&gt;

//#define int long long
#define ll long long
#define ii pair &lt; int, int &gt;
#define iii pair &lt; int, ii &gt;
#define fi first
#define se second
#define mp make_pair
#define FOR(i, l, r) for (auto i = l; i &lt;= r; ++i)
#define REV(i, r, l) for (auto i = r; i &gt;= l; --i)
#define REP(i, n) for (auto i = 0; i &lt; n; ++i)
#define debug(x) cout &lt;&lt; &quot;[Debuging]...&quot; &lt;&lt; (#x) &lt;&lt; &quot; is &quot; &lt;&lt; (x) &lt;&lt; endl;
#define endl &quot;\n&quot;

using namespace std;

const string file_name = &quot;Task&quot;;
const int inf = 1e9 + 7;
const int N = 1e4 + 7;

int n, root[N];
vector &lt; iii &gt; edge;

void Init() {
	for (int i = 1; i &lt;= n + 1; ++i) {
		root[i] = i;
	}
}

int GetRoot(int u) {
	if (u == root[u]) return (u);
	return (u = GetRoot(root[u]));
}

bool Union(int u, int v) {
	int uu = GetRoot(u);
	int vv = GetRoot(v);
	if (uu == vv) return (false);
	root[vv] = uu;
	return (true);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen ((file_name + &quot;.inp&quot;).c_str(), &quot;r&quot;, stdin);
	freopen ((file_name + &quot;.out&quot;).c_str(), &quot;w&quot;, stdout);
	cin &gt;&gt; n;
	for (int i = 1; i &lt;= n; ++i) {
		int cost;
		cin &gt;&gt; cost;
		edge.push_back(iii(cost, ii(i, n + 1)));
	}
	for (int i = 1; i &lt;= n; ++i) {
		for (int j = 1; j &lt;= n; ++j) {
			int tmp;
			cin &gt;&gt; tmp;
			if (i &lt; j) {
				iii tmp1 = iii(tmp, ii(i, j));
				edge.push_back(tmp1);
			}
		}
	}

	sort(edge.begin(), edge.end());
	int sum = 0;
	Init();
	for (int i = 0; i &lt; edge.size(); ++i) {
		int res = Union(edge[i].se.fi, edge[i].se.se);
		if (res) sum += edge[i].fi;
	}
	cout &lt;&lt; sum &lt;&lt; endl;
}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>NKCITY | Xây dựng thành phố</title>
            <link>https://minhnguyen1803lqd.github.io/posts/2020/09/nkcity-x%C3%A2y-d%E1%BB%B1ng-th%C3%A0nh-ph%E1%BB%91/</link>
            <pubDate>Sun, 20 Sep 2020 13:13:58 +0700</pubDate>
            
            <guid>https://minhnguyen1803lqd.github.io/posts/2020/09/nkcity-x%C3%A2y-d%E1%BB%B1ng-th%C3%A0nh-ph%E1%BB%91/</guid>
            <description>Đề bài: Nước Anpha đang lập kế hoạch xây dựng một thành phố mới và hiện đại. Theo kế hoạch, thành phố sẽ có N vị trí quan trọng, được gọi là N trọng điểm và các trọng điểm này được đánh số từ 1 tới N. Bộ giao thông đã lập ra một danh sách M tuyến đường hai chiều có thể xây dựng được giữa hai trọng điểm nào đó.</description>
            <content type="html"><![CDATA[<h2 id="đề-bài"><em>Đề bài</em>:</h2>
<p>Nước Anpha đang lập kế hoạch xây dựng một thành phố mới và hiện đại. Theo kế hoạch, thành phố sẽ có N vị trí quan trọng, được gọi là N trọng điểm và các trọng điểm này được đánh số từ 1 tới N. Bộ giao thông đã lập ra một danh sách M tuyến đường hai chiều có thể xây dựng được giữa hai trọng điểm nào đó. Mỗi tuyến đường có một thời gian hoàn thành khác nhau.</p>
<p>Các tuyến đường phải được xây dựng sao cho N trọng điểm liên thông với nhau. Nói cách khác, giữa hai trọng điểm bất kỳ cần phải di chuyển được đến nhau qua một số tuyến đường. Bộ giao thông sẽ chọn ra một số tuyến đường từ trong danh sách ban đầu để đưa vào xây dựng sao cho điều kiện này được thỏa mãn.</p>
<p>Do nhận được đầu tư rất lớn từ chính phủ, bộ giao thông sẽ thuê hẳn một đội thi công riêng cho mỗi tuyến đường cần xây dựng. Do đó, thời gian để hoàn thành toàn bộ các tuyến đường cần xây dựng sẽ bằng thời gian lâu nhất hoàn thành một tuyến đường nào đó.</p>
<p><strong>Yêu cầu</strong>: Giúp bộ giao thông tính thời gian hoàn thành các tuyến đường sớm nhất thỏa mãn yêu cầu đã nêu.</p>
<p><strong>Input</strong>
Dòng chứa số N và M (1≤N≤ 1000; 1≤M≤10000).</p>
<p>M tiếp theo, mỗi dòng chứa ba số nguyên u, v và t cho biết có thể xây dựng tuyến đường nối giữa trọng điểm u và trọng điểm v trong thời gian t. Không có hai tuyến đường nào nối cùng một cặp trọng điểm.</p>
<p><strong>Output</strong>
Một số nguyên duy nhất là thời gian sớm nhất hoàn thành các tuyến đường thỏa mãn yêu cầu đã nêu.</p>
<p><strong>Example</strong>:</p>
<pre><code>Input:
5 7
1 2 2
1 5 1
2 5 1
1 4 3
1 3 2
5 3 2
3 4 4
Output:
3
</code></pre>
<h2 id="ý-tưởng"><em>Ý tưởng</em>:</h2>
<p>Dễ thấy rằng đề bài đã cho ta một đồ thị vô hướng có trọng số là thời gian hoàn thành từng đoạn đường. Từ đó yêu cầu bài toán là chọn nối các cạnh sao cho đồ thị liên thông và trọng số lớn nhất là nhỏ nhất.</p>
<p>Từ đây ta nghĩ đến bài toán tìm cay khung lớn nhất trên đồ thị (minimum spaning tree).</p>
<h2 id="code"><em>Code</em>:</h2>
<p>Đã nộp và AC trên VNOI.</p>
<p>Link: <a href="https://codeforces.com/group/FLVn1Sc504/contest/274823/problem/R">NKCITY</a></p>
<pre><code>#include &lt;bits/stdc++.h&gt;

#define ll long long
#define ii pair &lt; int, int &gt;
#define iii pair &lt; int, ii &gt;
#define fi first
#define se second
#define mp make_pair
#define FOR(i, l, r) for (auto i = l; i &lt;= r; ++i)
#define REV(i, r, l) for (auto i = r; i &gt;= l; --i)
#define REP(i, n) for (auto i = 0; i &lt; n; ++i)
#define debug(x) cout &lt;&lt; &quot;[Debuging]...&quot; &lt;&lt; (#x) &lt;&lt; &quot; is &quot; &lt;&lt; (x) &lt;&lt; endl;
#define endl &quot;\n&quot;

using namespace std;

const string file_name = &quot;Task&quot;;
const int inf = 1e9 + 7;
const int N = 1e3 + 7;

int n, m;
int root[N];
vector &lt; iii &gt; edge;

void Init() {
  for (int i = 1; i &lt;= n; ++i) {
    root[i] = i;
  }
}

int GetRoot(int u) {
  if (u == root[u]) return (u);
  u = GetRoot(root[u]);
  return (u);
}

int Union(int u, int v) {
  int uu = GetRoot(u);
  int vv = GetRoot(v);
  if (uu != vv) {
    root[vv] = uu;
    return (true);
  } else {
    return (false);
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  freopen ((file_name + &quot;.inp&quot;).c_str(), &quot;r&quot;, stdin);
  freopen ((file_name + &quot;.out&quot;).c_str(), &quot;w&quot;, stdout);
  cin &gt;&gt; n &gt;&gt; m;
  Init();
  for (int i = 1; i &lt;= m; ++i) {
    iii tmp;
    cin &gt;&gt; tmp.se.fi &gt;&gt; tmp.se.se &gt;&gt; tmp.fi;
    edge.push_back(tmp);
  }
  sort(edge.begin(), edge.end());
  int ans = -inf;
  for (int i = 0; i &lt; edge.size(); ++i) {
    int res = Union(edge[i].se.fi, edge[i].se.se);
    if (res) ans = max(ans, edge[i].fi);
  }
  cout &lt;&lt; ans &lt;&lt; endl;

}</code></pre>
]]></content>
        </item>
        
        <item>
            <title>QBMST | Cây khung nhỏ nhất</title>
            <link>https://minhnguyen1803lqd.github.io/posts/2020/09/qbmst-c%C3%A2y-khung-nh%E1%BB%8F-nh%E1%BA%A5t/</link>
            <pubDate>Sun, 20 Sep 2020 13:13:58 +0700</pubDate>
            
            <guid>https://minhnguyen1803lqd.github.io/posts/2020/09/qbmst-c%C3%A2y-khung-nh%E1%BB%8F-nh%E1%BA%A5t/</guid>
            <description>Đề bài Cho đơn đồ thị vô hướng liên thông G = (V, E) gồm n đỉnh và m cạnh, các đỉnh được đánh số từ 1 tới n và các cạnh được đánh số từ 1 tới m. Hãy tìm cây khung nhỏ nhất của đồ thị G
Input
Dòng 1: Chứa hai số n, m (1≤n≤10000; 1≤m≤15000)
M dòng tiếp theo, dòng thứ i có dạng ba số nguyên u, v, c.</description>
            <content type="html"><![CDATA[<h2 id="đề-bài"><em>Đề bài</em></h2>
<p>Cho đơn đồ thị vô hướng liên thông G = (V, E) gồm n đỉnh và m cạnh, các đỉnh được đánh số từ 1 tới n và các cạnh được đánh số từ 1 tới m. Hãy tìm cây khung nhỏ nhất của đồ thị G</p>
<p><strong>Input</strong></p>
<p>Dòng 1: Chứa hai số n, m (1≤n≤10000; 1≤m≤15000)</p>
<p>M dòng tiếp theo, dòng thứ i có dạng ba số nguyên u, v, c. Trong đó (u, v) là chỉ số hai đỉnh đầu mút của cạnh thứ i và c trọng số của cạnh đó (1≤u, v≤ n; 0≤c≤10000).</p>
<p><strong>Output</strong></p>
<p>Gồm 1 dòng duy nhất: Ghi trọng số cây khung nhỏ nhất</p>
<p><strong>Example</strong></p>
<pre><code>Input:
6 9
1 2 1
1 3 1
2 4 1
2 3 2
2 5 1
3 5 1
3 6 1
4 5 2
5 6 2
Output:
5
</code></pre><h2 id="ý-tưởng"><em>Ý tưởng</em></h2>
<p>Sử dụng thuật toán tìm cây khung nhỏ nhất</p>
<h2 id="code"><em>Code</em></h2>
<p>Đã nộp và AC trên VNOI</p>
<p>Link: <a href="https://codeforces.com/group/FLVn1Sc504/contest/274518/problem/R">QBMST</a></p>
<pre><code>#include &lt;bits/stdc++.h&gt;

//#define int long long
#define ll long long
#define ii pair &lt; int, int &gt;
#define iii pair &lt; int, ii &gt;
#define fi first
#define se second
#define mp make_pair
#define FOR(i, l, r) for (auto i = l; i &lt;= r; ++i)
#define REV(i, r, l) for (auto i = r; i &gt;= l; --i)
#define REP(i, n) for (auto i = 0; i &lt; n; ++i)
#define debug(x) cout &lt;&lt; &quot;[Debuging]...&quot; &lt;&lt; (#x) &lt;&lt; &quot; is &quot; &lt;&lt; (x) &lt;&lt; endl;
#define endl &quot;\n&quot;

using namespace std;

const string file_name = &quot;Task&quot;;
const int inf = 1e9 + 7;
const int N = 1e4 + 7;

int n, m;
int root[N];
vector &lt; iii &gt; edge;

void Init() {
	for (int i = 1; i &lt;= n; ++i) root[i] = i;
}

int GetRoot(int u) {
	if (u == root[u]) return (u);
	return (u = GetRoot(root[u]));
}

int Union(int u, int v) {
	int uu = GetRoot(u);
	int vv = GetRoot(v);
	if (uu == vv) return (false);
	root[vv] = uu;
	return (true);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen ((file_name + &quot;.inp&quot;).c_str(), &quot;r&quot;, stdin);
	freopen ((file_name + &quot;.out&quot;).c_str(), &quot;w&quot;, stdout);
	cin &gt;&gt; n &gt;&gt; m;
	Init();
	for (int i = 1; i &lt;= m; ++i) {
		iii tmp;
		cin &gt;&gt; tmp.se.fi &gt;&gt; tmp.se.se &gt;&gt; tmp.fi;
		edge.push_back(tmp);
	}
	sort(edge.begin(), edge.end());
	int ans = 0;
	for (int i = 0; i &lt; edge.size(); ++i) {
		int res = Union(edge[i].se.fi, edge[i].se.se);
		if (res) ans += edge[i].fi;
	}
	cout &lt;&lt; ans &lt;&lt; endl;
}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Chuyên đề hình học</title>
            <link>https://minhnguyen1803lqd.github.io/posts/2020/09/chuy%C3%AAn-%C4%91%E1%BB%81-h%C3%ACnh-h%E1%BB%8Dc/</link>
            <pubDate>Mon, 14 Sep 2020 23:39:59 +0700</pubDate>
            
            <guid>https://minhnguyen1803lqd.github.io/posts/2020/09/chuy%C3%AAn-%C4%91%E1%BB%81-h%C3%ACnh-h%E1%BB%8Dc/</guid>
            <description>Nguồn: thầy Lưu Hải Phong.
Code: Nguyễn Nhật Minh.
Xin chào mọi người, mình là Tuin. Đây là những kiến thức về chuyên đề hình học. Những kiến thức này sẽ được cập nhật liên tục nên mọi người hãy chăm chỉ ghé vào blog để đọc nhé. Xin cảm ơn.
Lưu ý Bài viết chỉ mang tính chất tham khảo.
 Các khai báo và định nghĩa Để tiện cho việc viết và đọc code thì mình sẽ định nghĩa và khai báo như sau.</description>
            <content type="html"><![CDATA[<p><em><strong>Nguồn</strong></em>: <a href="facebook.com/phong.hai.750">thầy Lưu Hải Phong</a>.</p>
<p><em><strong>Code</strong></em>: <a href="facebook.com/nnminh.Tuinie">Nguyễn Nhật Minh</a>.</p>
<p>Xin chào mọi người, mình là Tuin. Đây là những kiến thức về chuyên đề hình học. Những kiến thức này sẽ được cập nhật liên tục nên mọi người hãy chăm chỉ ghé vào blog để đọc nhé. Xin cảm ơn.</p>
<p><strong>Lưu ý</strong> Bài viết chỉ mang tính chất tham khảo.</p>
<hr>
<h2 id="các-khai-báo-và-định-nghĩa">Các khai báo và định nghĩa</h2>
<p>Để tiện cho việc viết và đọc code thì mình sẽ định nghĩa và khai báo như sau. Các bạn có thể tham khảo</p>
<pre><code>#define ii pair &lt; double, double &gt;
#define x first
#define y second

const int N = 1e4 + 7;
const double inf = 1e9 + 7;
</code></pre><hr>
<h2 id="điểm-tọa-độ-và-vecto">Điểm, tọa độ và vecto</h2>
<p>Trên mặt phẳng tọa độ Oxy, các điểm được biểu diễn dưới một cặp số (x, y) với x là hoành độ và y là tung độ. Trong lập trình ta có thể khởi tạo một điểm mới như sau:</p>
<pre><code>ii A = ii(3, 5);
</code></pre><p>Vì một điểm được biểu diễn bởi một cặp giá trị gồm 2 số thực nên ta sử dụng cấu trúc <code>pair</code> trong C++ để lưu trữ và tương tác với nó.</p>
<p><code>ii A = ii(x, y)</code> tương ứng với việc gán cho điểm A có tọa độ x = 3, y = 5.</p>
<p>Tương tự đối với một vecto bất kì ta cũng có thể biểu diễn qua một cặp số (x, y) như sau:</p>
<pre><code>ii AB = ii(-1, 1);
</code></pre><hr>
<h2 id="tich-vô-hướng-tích-chấm-và-tích-có-hướng-tích-chéo">Tich vô hướng (Tích chấm) và Tích có hướng (Tích chéo)</h2>
<h3 id="tích-vô-hướng"><strong>Tích vô hướng</strong></h3>
<p>Một độ đo về mức độ cùng chiều của hai vectơ. Là cơ sở để xây dựng về các khái niệm khoảng cách và độ dài.</p>
<p><em>Biểu diễn trong C++:</em></p>
<pre><code>double TichCham(ii AB, ii CD) {
    return (AB.x * CD.x + AB.y * CD.y);
}
</code></pre><h3 id="tích-có-hướng"><strong>Tích có hướng</strong></h3>
<p>Xác định chiều và tính diện tích hình bình hành.</p>
<p><em>Biểu diễn trong C++:</em></p>
<pre><code>double TichCheo(ii AB, ii CD) {
    return (AB.x * CD.y - CD.x * AB.y);
}
</code></pre><h3 id="ứng-dụng"><strong>Ứng dụng</strong></h3>
<p>Cho 3 điểm A, B, C. Kiểm tra điểm C có nằm trên đoạn thẳng AB hay không.</p>
<pre><code>bool DiemNamTren(ii A, ii B, ii C) {
    ii AC = TaoVector(A, C);
    ii BC = TaoVector(B, C);
    if (TichCheo(AC, BC) == 0 and TichCham(AC, BC) &lt;= 0) {
        return (true);
    }
    return (false);
}
</code></pre><p>Cho 2 vector AB, BC. Hãy xác định hướng của 2 vector.</p>
<pre><code>int Huong(ii A, ii B, ii C) {
    double res = TichCheo(TaoVector(A, C), TaoVector(B, C));
    if (res &gt; 0) return (1);    //  rẽ trái
    if (res == 0) return (0);   //  thẳng hàng
    return (-1);                //  rẽ phải
}
</code></pre><hr>
<h2 id="hai-đoạn-thẳng-cắt-nhau-đoạn-thẳng-và-tia-cắt-nhau">Hai đoạn thẳng cắt nhau, đoạn thẳng và tia cắt nhau</h2>
<h3 id="hai-đoạn-thẳng-cắt-nhau"><strong>Hai đoạn thẳng cắt nhau</strong></h3>
<p>Cho 4 điểm A, B, C, D hãy cho biết 2 đoạn thẳng AB và CD có tồn tại một giao điểm duy nhất hay không.</p>
<pre><code>ii GiaoDiem(ii A, ii B, ii C, ii D) {
    ii AB = TaoVector(A, B);
    ii DC = TaoVector(D, C);
    ii AC = TaoVector(A, C);
    double d = TichCheo(AB, DC);
    double Dx = TichCheo(AC, DC);
    double Dy = TichCheo(AB, AC);
    double p = Dx / d, q = Dy / d;
    if (0 &lt;= p and p &lt;= 1 and 0 &lt;= q and q &lt;= 1) {
        return (ii(A.x + p * AB.x, A.y + p * AB.y));
    }
    return (ii(inf, inf));
}
</code></pre><h3 id="đoạn-thẳng-và-tia-cắt-nhau"><strong>Đoạn thẳng và tia cắt nhau</strong></h3>
<p>Cho 4 điểm A, B, C, D. Hãy cho biết đoạn thẳng AB có cắt tia CD tại một điểm duy nhất hay không.</p>
<pre><code>ii GiaoDiemTia(ii A, ii B, ii C, ii D) {    //  đoạn thẳng AB cắt tia CD
    ii AB = TaoVector(A, B);
    ii DC = TaoVector(D, C);
    ii AC = TaoVector(A, C);
    double d = TichCheo(AB, DC);
    double Dx = TichCheo(AC, DC);
    double Dy = TichCheo(AB, AC);
    double p = Dx / d, q = Dy / d;
    if (0 &lt;= p and p &lt;= 1 and 0 &lt; q) {
        return (ii(A.x + p * AB.x, A.y + p * AB.y));
    }
    return (ii(inf, inf));
}
</code></pre><hr>
<h2 id="diện-tích-đa-giác">Diện tích đa giác</h2>
<p>Cho đa giác có N đỉnh P[0], P[1], P[2], &hellip;, P[n - 1] cầm canh P[0] = P[n].</p>
<p>Diện tích đa giác được tính như sau:</p>
<pre><code>double DienTichDaGiac(ii Poly[N], int n) {
    double res = 0;
    ii O = ii(0, 0);
    Poly[0] = Poly[n];
    for (int i = 0; i &lt; n; ++i) 
        res += TichCheo(TaoVector(O, Poly[i]), TaoVector(O, Poly[i + 1]));
    return (res / 2);
}
</code></pre><hr>
<h2 id="điểm-nằm-trong-đa-giác">Điểm nằm trong đa giác</h2>
<p>Cho đa giác có N đỉnh P[0], P[1], P[2], &hellip;, P[n - 1] cầm canh P[0] = P[n] và điểm M(x, y).</p>
<p>Hãy cho biết điểm M có nằm trong đa giác P hay không.</p>
<pre><code>bool DiemTrongDaGiac(ii Poly[N], int n, ii M) {
    int range = 100;
    ii N;
    while (1) {
        N = ii(rand() % range, rand() % range);
        int flag = 0;
        for (int i = 1; i &lt;= n; ++i) {
            if (Poly[i].x == N.x and Poly[i].y == N.y) flag = 1;
        }
        if (!flag) break;
    }
    int cnt = 0;
    Poly[0] = Poly[n];
    for (int i = 0; i &lt; n; ++i) {
        ii T = GiaoDiemTia(M, N, Poly[i], Poly[i + 1]);
        if (T.x != inf and T.y != inf) cnt++;
    }
    if (cnt % 2 == 0) return (1);
    return (0);
}
</code></pre><hr>
<h2 id="tổng-kết">Tổng kết</h2>
<p>Trên đây là những kiến thức mình học được và thể hiện lại theo cách hiểu của mình nên chỉ có tính tham khảo.</p>
<p><strong>Các hàm biểu diễn đã được mình tổng hợp ở đây:</strong> <a href="https://ideone.com/azORyL">Code</a></p>
<hr>
<p>Mọi ý kiến đóng góp xin bạn hãy gửi qua Facebook: <a href="facebook.com/nnminh.Tuinie">Nguyễn Nhật Minh</a>.</p>
<p>Cảm ơn bạn đã dành thời gian ra đọc.</p>
]]></content>
        </item>
        
    </channel>
</rss>
